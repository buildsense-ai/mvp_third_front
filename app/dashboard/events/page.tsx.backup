"use client"

import { useState, useEffect, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import {
  AlertCircle,
  Calendar,
  Edit,
  FileText,
  MapPin,
  Plus,
  Clock,
  Users,
  ClipboardList,
  FileCheck,
} from "lucide-react"
import { ProblemRecordDetailModal } from "@/components/problem-record-detail-modal"
import { ProblemRecordEditModal } from "@/components/problem-record-edit-modal"
import { GenerateNotificationModal } from "@/components/generate-notification-modal"
import { useRouter } from "next/navigation"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import {
  getSupervisionRecords,
  type SupervisionRecord,
  getIssueRecords,
  updateIssueRecord,
  type IssueRecord,
  deleteIssueRecord,
} from "@/lib/api-service"
import { IssueRecordCreateModal } from "@/components/issue-record-create-modal"
import { toast } from "@/components/ui/use-toast"

// 基础事件类型
interface BaseEvent {
  id: string
  type: string
  title: string
  date: string
  weather?: string
  icon?: any
  location?: string
  status?: string
  attendees?: number
  time?: string
  responsibleUnit?: string
  generatedDocuments?: Array<{
    id: string
    title: string
    date: string
    type: string
  }>
}

// 扩展的事件类型
type ExtendedEvent = BaseEvent & Partial<IssueRecord & SupervisionRecord>

// 扩展的问题记录类型，包含前端需要的额外属性
interface ExtendedIssueRecord {
  // 基础IssueRecord属性（除了id）
  location: string
  description: string
  images: string[]
  record_time: string
  update_time: string
  weather?: string
  attendees?: number
  time?: string
  generatedDocuments?: Array<{
    id: string
    title: string
    date: string
    type: string
  }>
  
  // 前端扩展属性
  id: string // 前端使用字符串ID
  type: "issue"
  icon?: any
  title: string
  date: string
  status: string
  hasImage?: boolean
  responsibleUnit?: string
  standards?: any[]
  documents: any[]
}

// 扩展的旁站记录类型，包含前端需要的额外属性
interface ExtendedSupervisionRecord {
  // 基础SupervisionRecord属性
  id?: number
  project_name: string | null
  construction_unit: string | null
  pangzhan_unit: string | null
  supervision_company: string | null
  start_datetime: string | null
  end_datetime: string | null
  work_overview: string | null
  pre_work_check_content: string | null
  supervising_personnel: string | null
  issues_and_opinions: string | null
  rectification_status: string | null
  remarks: string | null
  construction_enterprise: string | null
  supervising_enterprise: string | null
  supervising_organization: string | null
  on_site_supervising_personnel: string | null
  document_urls: string | null
  created_at?: string
  updated_at?: string
  
  // 前端扩展属性
  type: "supervision"
  icon?: any
  title: string
  date: string
  time?: string
  location?: string
  conclusion?: string
  hasDocument?: boolean
  weather?: string
  attendees?: number
  responsibleUnit?: string
  generatedDocuments?: Array<{
    id: string
    title: string
    date: string
    type: string
  }>
}

// 监理日志数据
const mockDailyLogs: ExtendedEvent[] = [
  {
    id: "log-1",
    type: "daily-log",
    title: "监理日志 - 2025-05-10",
    date: "2025-05-10",
    weather: "晴",
    icon: Calendar,
    basicInfo: {
      projectName: "某某建设工程",
      date: "2025-05-10",
      weather: "晴",
      temperature: "20-28℃",
    },
    supervisionPersonnel: [
      { id: "chief", label: "总工（总监）", checked: true },
      { id: "specialist", label: "专工（专业监理）", checked: true },
    ],
    constructionActivities: [
      {
        id: "ca1",
        location: "A区3层",
        content: "浇筑混凝土",
        details: "今日对A区3层进行了混凝土浇筑，共计约120立方米。",
      },
    ],
    supervisionActivities: [
      {
        id: "sa1",
        type: "旁站",
        relatedActivity: "浇筑混凝土（A区3层）",
        details: "对A区3层混凝土浇筑进行了旁站监理，检查了模板支撑、钢筋绑扎情况，确保浇筑质量符合施工要求。",
      },
    ],
    problems: {
      quality: [
        {
          id: "q1",
          description: "发现A区3层混凝土浇筑过程中有少量蜂窝麻面",
          measures: "已要求施工单位及时处理并加强模板支设和振捣工作",
        },
      ],
      safety: [],
      progress: [],
      cost: [],
    },
    otherMatters: [
      {
        id: "om1",
        type: "correspondence",
        title: "重要来往文件、电话记录",
        content: "今日收到建设单位关于工程变更的通知函1份。",
      },
    ],
    generatedDocuments: [{ id: "doc-1", title: "监理日志-2025-05-10", date: "2025-05-10", type: "pdf" }],
  },
  {
    id: "log-2",
    type: "daily-log",
    title: "监理日志 - 2025-05-11",
    date: "2025-05-11",
    weather: "多云",
    icon: Calendar,
    basicInfo: {
      projectName: "某某建设工程",
      date: "2025-05-11",
      weather: "多云",
      temperature: "18-25℃",
    },
    supervisionPersonnel: [
      { id: "chief", label: "总工（总监）", checked: true },
      { id: "specialist", label: "专工（专业监理）", checked: true },
    ],
    constructionActivities: [],
    supervisionActivities: [],
    problems: {
      quality: [],
      safety: [],
      progress: [],
      cost: [],
    },
    otherMatters: [],
    generatedDocuments: [],
  },
]

// 会议纪要数据
const mockMeetingMinutes = [
  {
    id: "meeting-1",
    type: "meeting",
    title: "项目例会",
    date: "2025-05-10",
    attendees: 12,
    icon: FileCheck,
    basicInfo: {
      meetingName: "某某工程第1次监理例会",
      dateTime: "2025年5月10日 14:00-16:00",
      location: "项目部会议室",
      host: "张三（总监）",
      recorder: "李四（监理员）",
      attendees: "建设单位：王五、赵六；施工单位：钱七、孙八；监理单位：张三、李四",
    },
    constructionIssues: "施工单位反映基坑支护结构变形超出设计允许值，需要设计单位提供处理方案。",
    supervisionAnalysis: {
      safety: "本周安全文明施工情况良好，未发现重大安全隐患。",
      qualityAndProgress: "本周完成A区基坑开挖，质量符合要求，进度略有滞后。",
      documentation: "施工日志记录不够详细，需要加强。",
      nextWeekRequirements: "加强基坑支护监测，确保施工安全。",
    },
    costUnit: "本周已完成A区基坑开挖工程量的计量，正在审核。",
    designUnit: "已收到基坑支护变形问题，正在研究处理方案。",
    surveyUnit: "无",
    buildingUnit: {
      safety: "要求施工单位加强现场安全管理，特别是高处作业安全防护。",
      qualityAndProgress: "要求加快施工进度，确保下周完成B区基坑开挖。",
      documentation: "要求完善施工资料，及时归档。",
      nextWeekRequirements: "重点关注基坑支护问题，确保施工安全。",
    },
    followUpItems: {
      designChanges: "基坑支护设计变更待定。",
      workContactApproval: "已审批工作联系单3份，待审批2份。",
    },
    generatedDocuments: [{ id: "doc-m1", title: "项目例会纪要-2025-05-10", date: "2025-05-10", type: "pdf" }],
  },
]

export default function EventsPage() {
  const router = useRouter()
  const [selectedType, setSelectedType] = useState<string>("all")
  const [selectedStatus, setSelectedStatus] = useState<string>("all")
  const [selectedEvents, setSelectedEvents] = useState<string[]>([])
  const [showMergeDialog, setShowMergeDialog] = useState(false)
  const [showInspectionDialog, setShowInspectionDialog] = useState(false)

  // 问题记录状态 - 使用扩展类型
  const [issueRecords, setIssueRecords] = useState<ExtendedIssueRecord[]>([])
  const [loadingIssues, setLoadingIssues] = useState(true)

  // 旁站记录状态 - 使用扩展类型
  const [supervisionRecords, setSupervisionRecords] = useState<ExtendedSupervisionRecord[]>([])
  const [loadingSupervision, setLoadingSupervision] = useState(true)

  // State for problem record detail modal
  const [problemDetailModalOpen, setProblemDetailModalOpen] = useState(false)
  const [selectedRecord, setSelectedRecord] = useState<any>(null)

  // State for problem record edit modal
  const [problemEditModalOpen, setProblemEditModalOpen] = useState(false)

  // State for notification generation modal
  const [notificationModalOpen, setNotificationModalOpen] = useState(false)

  // State for issue record create modal
  const [issueCreateModalOpen, setIssueCreateModalOpen] = useState(false)

  // 加载问题记录数据
  const loadIssueRecords = async () => {
    try {
      setLoadingIssues(true)
      let statusFilter: string | undefined
      
      // 根据前端状态映射到后端状态
      if (selectedStatus !== "all") {
        switch (selectedStatus) {
          case "pending":
            statusFilter = "待处理"
            break
          case "resolved":
            statusFilter = "已闭环"
            break
        }
      }
      
      const records = await getIssueRecords(0, 50, statusFilter)

      // 转换数据格式以匹配前端显示，确保每个记录都有唯一的 ID
      const processedRecords = records.map((record, index) => {
        // 使用记录 ID 和时间戳组合生成唯一标识符
        const uniqueId = `${record.id}-${record.record_time || Date.now()}-${index}`
        
        // 映射后端状态到前端状态
        let frontendStatus = "pending"
        switch (record.status) {
          case "待处理":
            frontendStatus = "pending"
            break
          case "已闭环":
            frontendStatus = "resolved"
            break
          default:
            frontendStatus = "pending"
        }
        
        return {
          ...record,
          id: uniqueId, // 使用生成的唯一 ID
          type: "issue" as const,
          icon: AlertCircle,
          title: record.description,
          date: record.record_time
            ? new Date(record.record_time).toISOString().split("T")[0]
            : new Date().toISOString().split("T")[0],
          status: frontendStatus,
          hasImage: record.images && record.images.length > 0,
          responsibleUnit: "施工单位", // 后端暂无此字段，使用默认值
          standards: [], // 后端暂无此字段
          documents: [], // 后端暂无此字段
        }
      })

      setIssueRecords(processedRecords)
    } catch (error) {
      console.error("加载问题记录失败:", error)
    } finally {
      setLoadingIssues(false)
    }
  }

  // 加载旁站记录数据
  const loadSupervisionRecords = async () => {
    try {
      setLoadingSupervision(true)
      const records = await getSupervisionRecords(0, 50) // 加载前50条记录

      // 为旁站记录添加 type 字段和其他必要字段
      const processedRecords: ExtendedSupervisionRecord[] = records.map((record) => ({
        ...record,
        type: "supervision" as const,
        icon: ClipboardList,
        title: record.project_name || "旁站记录",
        date: record.start_datetime
          ? new Date(record.start_datetime).toISOString().split("T")[0]
          : new Date().toISOString().split("T")[0],
        time:
          record.start_datetime && record.end_datetime
            ? `${new Date(record.start_datetime).toLocaleTimeString("zh-CN", { hour: "2-digit", minute: "2-digit" })} - ${new Date(record.end_datetime).toLocaleTimeString("zh-CN", { hour: "2-digit", minute: "2-digit" })}`
            : undefined,
        location: record.pangzhan_unit || "未设置位置",
        conclusion: record.rectification_status || "待处理",
        hasDocument: !!record.document_urls,
      }))

      setSupervisionRecords(processedRecords)
    } catch (error) {
      console.error("加载旁站记录失败:", error)
    } finally {
      setLoadingSupervision(false)
    }
  }

  // 在组件内部合并所有事件时，确保 ID 唯一性
  const mockEvents = useMemo(() => {
    const events = [...issueRecords, ...mockDailyLogs, ...supervisionRecords, ...mockMeetingMinutes]
    // 使用 Map 来确保 ID 唯一性，并添加类型前缀
    const uniqueEvents = new Map()
    events.forEach(event => {
      const typePrefix = event.type || 'unknown'
      const baseId = event.id?.toString() || ''
      const uniqueId = `${typePrefix}-${baseId}`
      
      if (!uniqueEvents.has(uniqueId)) {
        uniqueEvents.set(uniqueId, {
          ...event,
          id: uniqueId // 使用带类型前缀的唯一 ID
        })
      } else {
        // 如果 ID 重复，添加时间戳和随机数后缀
        const timestamp = Date.now()
        const random = Math.floor(Math.random() * 1000)
        const fallbackId = `${uniqueId}-${timestamp}-${random}`
        uniqueEvents.set(fallbackId, {
          ...event,
          id: fallbackId
        })
      }
    })
    return Array.from(uniqueEvents.values())
  }, [issueRecords, supervisionRecords])

  // Reset selected events when type changes
  useEffect(() => {
    setSelectedEvents([])
  }, [selectedType])

  // Reset status filter when type changes to non-issue type
  useEffect(() => {
    if (selectedType !== "all" && selectedType !== "issue") {
      setSelectedStatus("all")
    }
  }, [selectedType])

  // 加载问题记录
  useEffect(() => {
    loadIssueRecords()
  }, [selectedStatus]) // 当状态筛选改变时重新加载

  // 加载旁站记录
  useEffect(() => {
    loadSupervisionRecords()
  }, [])

  // Filter events based on selected type and status
  const filteredEvents = mockEvents.filter((event) => {
    if (selectedType !== "all" && event.type !== selectedType) {
      return false
    }
    if (selectedStatus !== "all" && event.status !== selectedStatus) {
      return false
    }
    return true
  })

  const handleCheckboxChange = (eventId: string) => {
    setSelectedEvents((prev) => (prev.includes(eventId) ? prev.filter((id) => id !== eventId) : [...prev, eventId]))
  }

  const handleMergeEvents = () => {
    setShowMergeDialog(true)
  }

  const handleGenerateInspectionRecord = () => {
    setShowInspectionDialog(true)
  }

  const getBorderColor = (type: string) => {
    switch (type) {
      case "issue":
        return "border-red-200"
      default:
        return "border-gray-200"
    }
  }

  const getIconColor = (type: string) => {
    switch (type) {
      case "issue":
        return "text-red-500"
      default:
        return "text-gray-500"
    }
  }

  const getBadgeColor = (type: string) => {
    switch (type) {
      case "issue":
        return "bg-red-100 text-red-800 hover:bg-red-100"
      default:
        return "bg-gray-100 text-gray-800 hover:bg-gray-100"
    }
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "pending":
        return <Badge variant="destructive">待处理</Badge>
      case "resolved":
        return <Badge variant="default">已闭环</Badge>
      default:
        return <Badge variant="secondary">未知</Badge>
    }
  }

  const getEventTypeLabel = (type: string) => {
    switch (type) {
      case "issue":
        return "问题记录"
      default:
        return "未知类型"
    }
  }

  const canEditEvent = (event: any) => {
    return event.status !== "resolved"
  }

  const handleViewDetails = (event: any) => {
    setSelectedRecord(event)
    if (event.type === "issue") {
      setProblemDetailModalOpen(true)
    }
  }

  const handleEdit = (recordId: string) => {
    const record = mockEvents.find((event) => event.id === recordId)
    if (record) {
      setSelectedRecord(record)
      if (record.type === "issue") {
        setProblemEditModalOpen(true)
      }
    }
  }

  const handleSaveEdit = async (updatedRecord: any) => {
    try {
      if (updatedRecord.type === "issue") {
        // 提取原始 ID（去掉前缀和后缀）
        const originalId = updatedRecord.id.split('-')[1]
        
        // 映射前端状态到后端状态
        let backendStatus = "待处理"
        switch (updatedRecord.status) {
          case "pending":
            backendStatus = "待处理"
            break
          case "resolved":
            backendStatus = "已闭环"
            break
        }

        // 构建更新数据
        const updateData = {
          问题发生地点: updatedRecord.location || "",
          问题描述: updatedRecord.title || updatedRecord.description || "",
          状态: backendStatus,
          相关图片: Array.isArray(updatedRecord.相关图片) 
            ? updatedRecord.相关图片.join(',') 
            : updatedRecord.相关图片 || '',
        }

        await updateIssueRecord(originalId, updateData)
        
        toast({
          title: "更新成功",
          description: "问题记录已成功更新",
        })
        
        // 重新加载数据
        await loadIssueRecords()
        
        // 关闭模态框
        setProblemEditModalOpen(false)
      }
    } catch (error) {
      console.error("更新记录失败:", error)
      toast({
        title: "更新失败",
        description: "更新记录时发生错误，请重试",
        variant: "destructive",
      })
    }
  }

  const handleGenerateNotification = (recordId: string) => {
    const record = mockEvents.find((event) => event.id === recordId)
    if (record) {
      setSelectedRecord(record)
      setNotificationModalOpen(true)
    }
  }

  const handleConfirmNotification = (recordId: string) => {
    console.log("生成通知单:", recordId)
    setNotificationModalOpen(false)
  }

  const handleDeleteProblemRecord = async (recordId: string) => {
    try {
      // 提取原始 ID（去掉前缀和后缀）
      const originalId = recordId.split('-')[1]
      
      await deleteIssueRecord(originalId)
      
      toast({
        title: "删除成功",
        description: "问题记录已成功删除",
      })
      
      // 重新加载数据
      await loadIssueRecords()
      
      // 关闭模态框
      setProblemDetailModalOpen(false)
    } catch (error) {
      console.error("删除记录失败:", error)
      toast({
        title: "删除失败",
        description: "删除记录时发生错误，请重试",
        variant: "destructive",
      })
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h1 className="text-2xl font-bold">事件记录</h1>
          <p className="text-muted-foreground">管理和查看所有事件记录</p>
        </div>
        <Button onClick={() => setIssueCreateModalOpen(true)} className="gap-2">
          <Plus className="h-4 w-4" />
          新建问题记录
        </Button>
      </div>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <Select value={selectedType} onValueChange={setSelectedType}>
          <SelectTrigger className="w-full sm:w-[180px]">
            <SelectValue placeholder="选择类型" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">全部类型</SelectItem>
            <SelectItem value="issue">问题记录</SelectItem>
          </SelectContent>
        </Select>

        {(selectedType === "all" || selectedType === "issue") && (
          <Select value={selectedStatus} onValueChange={setSelectedStatus}>
            <SelectTrigger className="w-full sm:w-[180px]">
              <SelectValue placeholder="选择状态" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">全部状态</SelectItem>
              <SelectItem value="pending">待处理</SelectItem>
              <SelectItem value="resolved">已闭环</SelectItem>
            </SelectContent>
          </Select>
        )}
      </div>

      {/* Bulk Actions */}
      {selectedEvents.length > 0 && (
        <div className="flex gap-2 p-4 bg-muted rounded-lg">
          <span className="text-sm text-muted-foreground">已选择 {selectedEvents.length} 个事件</span>
          <Button variant="outline" size="sm" onClick={handleMergeEvents}>
            合并事件
          </Button>
          <Button variant="outline" size="sm" onClick={handleGenerateInspectionRecord}>
            生成巡检记录
          </Button>
        </div>
      )}

      {/* Events Grid */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {filteredEvents.map((event) => (
          <Card key={event.id} className={`relative ${getBorderColor(event.type)}`}>
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="flex items-center gap-2">
                  <Checkbox
                    checked={selectedEvents.includes(event.id)}
                    onCheckedChange={() => handleCheckboxChange(event.id)}
                  />
                  <Badge variant="secondary" className={getBadgeColor(event.type)}>
                    {getEventTypeLabel(event.type)}
                  </Badge>
                </div>
                {event.icon && <event.icon className={`h-4 w-4 ${getIconColor(event.type)}`} />}
              </div>
              <h3 className="font-medium line-clamp-2 mb-2">{event.title}</h3>

              <div className="flex items-center text-xs text-muted-foreground gap-1 mb-1">
                <Calendar className="h-3 w-3" />
                <span>{event.date}</span>
              </div>

              {event.location && (
                <div className="flex items-center text-xs text-muted-foreground gap-1 mb-1">
                  <MapPin className="h-3 w-3" />
                  <span>{event.location}</span>
                </div>
              )}

              {event.time && (
                <div className="flex items-center text-xs text-muted-foreground gap-1 mb-1">
                  <Clock className="h-3 w-3" />
                  <span>{event.time}</span>
                </div>
              )}

              {event.attendees && (
                <div className="flex items-center text-xs text-muted-foreground gap-1 mb-1">
                  <Users className="h-3 w-3" />
                  <span>参会人数: {event.attendees}</span>
                </div>
              )}

              {event.weather && <div className="text-xs text-muted-foreground mb-1">天气: {event.weather}</div>}

              {event.responsibleUnit && (
                <div className="text-xs text-muted-foreground mt-2">责任单位: {event.responsibleUnit}</div>
              )}
            </CardHeader>
            <CardContent className="pt-0">
              {event.status && getStatusBadge(event.status)}
            </CardContent>
            <CardFooter className="p-4 pt-0 flex justify-end gap-2 flex-wrap">
              {/* Show Generate Notification button for issue type events */}
              {event.type === "issue" && (
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button
                        variant="outline"
                        size="sm"
                        className="gap-1"
                        onClick={() => handleGenerateNotification(event.id)}
                      >
                        <FileText className="h-3 w-3" />
                        生成通知单
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>基于此问题生成监理工程师通知单</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              )}

              {/* Show edit button for all events except resolved ones */}
              {canEditEvent(event) && (
                <Button variant="outline" size="sm" className="gap-1" onClick={() => handleEdit(event.id)}>
                  <Edit className="h-3 w-3" />
                  编辑
                </Button>
              )}

              <Button variant="outline" size="sm" onClick={() => handleViewDetails(event)}>
                查看详情
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>

      {/* Problem Record Detail Modal */}
      <ProblemRecordDetailModal
        isOpen={problemDetailModalOpen}
        onClose={() => setProblemDetailModalOpen(false)}
        record={selectedRecord}
        onGenerateNotification={handleGenerateNotification}
        onEdit={handleEdit}
        onDelete={handleDeleteProblemRecord}
      />

      {/* Problem Record Edit Modal */}
      <ProblemRecordEditModal
        isOpen={problemEditModalOpen}
        onClose={() => setProblemEditModalOpen(false)}
        record={selectedRecord}
        onSave={handleSaveEdit}
      />

      {/* Generate Notification Modal */}
      <GenerateNotificationModal
        isOpen={notificationModalOpen}
        onClose={() => setNotificationModalOpen(false)}
        record={selectedRecord}
        onGenerate={handleConfirmNotification}
      />

      {/* Issue Record Create Modal */}
      <IssueRecordCreateModal
        isOpen={issueCreateModalOpen}
        onClose={() => setIssueCreateModalOpen(false)}
        onSuccess={loadIssueRecords}
      />

      {/* Merge Events Dialog */}
      <Dialog open={showMergeDialog} onOpenChange={setShowMergeDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>合并事件</DialogTitle>
            <DialogDescription>将选中的事件合并为一个综合记录</DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowMergeDialog(false)}>
              取消
            </Button>
            <Button onClick={() => setShowMergeDialog(false)}>确认合并</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Generate Inspection Record Dialog */}
      <Dialog open={showInspectionDialog} onOpenChange={setShowInspectionDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>生成巡检记录</DialogTitle>
            <DialogDescription>基于选中的事件生成巡检记录</DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowInspectionDialog(false)}>
              取消
            </Button>
            <Button onClick={() => setShowInspectionDialog(false)}>生成记录</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
